// generated by @sebspark/bruno-to-k6
import http from 'k6/http'
import { sleep, check } from 'k6'
import { usingBruno } from '@sebspark/bruno-to-k6/runtime'


const ENV = {}
const VARS = {}

export default function () {
  const { bru, req, parse } = usingBruno({ env: ENV, vars: VARS })

  // GET https://example.test/headers
  const res = http.request(
    'GET',
    parse.url('https://example.test/headers'),
    undefined,
    parse.params({headers: {'X-Trace-Id': 'abc-123', Accept: 'application/json'}}),
  )
  check(res, {'status < 400': r => r.status < 400})

  // POST https://example.test/sparql
  const res2 = http.request(
    'POST',
    parse.url('https://example.test/sparql'),
    parse.body('SELECT ?s ?p ?o\nWHERE {\n  ?s ?p ?o\n}\nLIMIT 10'),
  )
  check(res2, {'status < 400': r => r.status < 400})

  // GET https://example.test/search
  const res3 = http.request(
    'GET',
    parse.url('https://example.test/search?q=widgets&page=2'),
  )
  check(res3, {'status < 400': r => r.status < 400})

  // POST https://example.test/items
  const res4 = http.request(
    'POST',
    parse.url('https://example.test/items'),
    parse.body({name: 'Widget', price: 10.5}),
    parse.params({headers: {'Content-Type': 'application/json'}}),
  )
  check(res4, {'status < 400': r => r.status < 400})

  // POST https://example.test/raw
  const res5 = http.request(
    'POST',
    parse.url('https://example.test/raw'),
    parse.body('\'hello=world&x=1\''),
  )
  check(res5, {'status < 400': r => r.status < 400})

  // POST https://example.test/login
  const res6 = http.request(
    'POST',
    parse.url('https://example.test/login'),
    parse.body({username: 'alice', password: 'secret'}),
    parse.params({headers: {'Content-Type': 'application/x-www-form-urlencoded'}}),
  )
  check(res6, {'status < 400': r => r.status < 400})

  // POST https://example.test/upload
  const res7 = http.request(
    'POST',
    parse.url('https://example.test/upload'),
    parse.body({meta: {type: 'doc'}, file: '{{filePath}}'}),
  )
  check(res7, {'status < 400': r => r.status < 400})

  // POST https://example.test/graphql
  const res8 = http.request(
    'POST',
    parse.url('https://example.test/graphql'),
    parse.body({query: 'query Q($id: String!) {\n  me {\n    id\n  }\n}', variables: '{\n  "id": "1"\n}'}),
    parse.params({headers: {'Content-Type': 'application/json'}}),
  )
  check(res8, {'status < 400': r => r.status < 400})

  // GET https://example.test/secure
  const res9 = http.request(
    'GET',
    parse.url('https://example.test/secure'),
    undefined,
    parse.params({headers: {Authorization: 'Bearer {{token}}'}}),
  )
  check(res9, {'status < 400': r => r.status < 400})

  // GET https://example.test/basic
  const res10 = http.request(
    'GET',
    parse.url('https://example.test/basic'),
    undefined,
    parse.params({headers: {Authorization: 'Basic YWxpY2U6c2VjcmV0'}}),
  )
  check(res10, {'status < 400': r => r.status < 400})

  // GET https://example.test/with-apikey
  const res11 = http.request(
    'GET',
    parse.url('https://example.test/with-apikey'),
    undefined,
    parse.params({headers: {'X-Api-Key': '123'}}),
  )
  check(res11, {'status < 400': r => r.status < 400})

  // GET https://example.test/scripted
  const res12 = http.request(
    'GET',
    parse.url('https://example.test/scripted'),
  )
  check(res12, {'status < 400': r => r.status < 400})

  // GET https://example.test/digest
  const res13 = http.request(
    'GET',
    parse.url('https://example.test/digest'),
    undefined,
    parse.params({headers: {Authorization: 'Digest ${bru.digestAuth(ENV, 'alice', 'secret')}'}}),
  )
  check(res13, {'status < 400': r => r.status < 400})

  // GET https://example.test/oauth
  const res14 = http.request(
    'GET',
    parse.url('https://example.test/oauth'),
    undefined,
    parse.params({headers: {Authorization: 'Bearer ${bru.oauth2Token(ENV, 'credentials')}'}}),
  )
  check(res14, {'status < 400': r => r.status < 400})

  sleep(1)
}
