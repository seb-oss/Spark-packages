import { readFileSync, writeFileSync } from 'fs'
import { inspect } from 'util'
import { XMLParser } from 'fast-xml-parser'

const [, , inputFile, outputFile] = process.argv

const xml = readFileSync(inputFile, 'utf-8')
const currencies = new XMLParser().parse(xml).ISO_4217.CcyTbl.CcyNtry
const map = currencies
  .filter((c) => c.Ccy)
  .reduce(
    (map, c) =>
      Object.assign(map, {
        [c.Ccy]: {
          currencyName: c.CcyNm,
          currencyCode: c.Ccy,
          currencyNumber: c.CcyNbr,
          currencyMinorUnits: c.CcyMnrUnts,
        },
      }),
    {}
  )

const content = `// This file is generated by scripts/parseCurrenciesXml.mjs
// Do not edit manually

export type ISO_4217 = ${Object.keys(map)
  .map((k) => `'${k}'`)
  .join(' | ')}

export type Currency = {
${Object.entries(Object.values(map)[0])
  .map(([key]) => {
    switch (key) {
      case 'currencyName':
        return `\t${key}: string`
      case 'currencyCode':
        return `\t${key}: ISO_4217`
      case 'currencyNumber':
        return `\t${key}: number`
      case 'currencyMinorUnits':
        return `\t${key}: number | string`
    }
  })
  .join(',\n')}
}

export type Currencies = Record<ISO_4217, Currency> 

export const currencies: Currencies = ${inspect(map)}
`

writeFileSync(outputFile, content, 'utf-8')
